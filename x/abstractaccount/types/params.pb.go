// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: abstractaccount/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// MaxGasBefore is the maximum amount of gas that can be consumed by the
	// contract call in the before_tx decorator.
	//
	// Must be greater than zero.
	MaxGasBefore uint64 `protobuf:"varint,1,opt,name=max_gas_before,json=maxGasBefore,proto3" json:"max_gas_before,omitempty"`
	// MaxGasAfter is the maximum amount of gas that can be consumed by the
	// contract call in the after_tx decorator.
	//
	// Must be greater than zero.
	MaxGasAfter uint64 `protobuf:"varint,2,opt,name=max_gas_after,json=maxGasAfter,proto3" json:"max_gas_after,omitempty"`
	// AllowAllCodeIDs describes whether to allow any code IDs to be used when
	// instantiating new AbstractAccounts, or migrating existing AbstractAccounts.
	//
	// If set to true, the AllowedCodeIDs list must be empty.
	AllowAllCodeIDs bool `protobuf:"varint,3,opt,name=allow_all_code_ids,json=allowAllCodeIds,proto3" json:"allow_all_code_ids,omitempty"`
	// AllowedCodeIDs is an exhausitive list of code IDs that can be used when
	// instantiating new AbstractAccounts, or migrating existing AbstractAccounts./
	//
	// Must be empty if AllowAllCodeIDs is set to true.
	AllowedCodeIDs []uint64 `protobuf:"varint,4,rep,packed,name=allowed_code_ids,json=allowedCodeIds,proto3" json:"allowed_code_ids,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9649df9baf604574, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxGasBefore() uint64 {
	if m != nil {
		return m.MaxGasBefore
	}
	return 0
}

func (m *Params) GetMaxGasAfter() uint64 {
	if m != nil {
		return m.MaxGasAfter
	}
	return 0
}

func (m *Params) GetAllowAllCodeIDs() bool {
	if m != nil {
		return m.AllowAllCodeIDs
	}
	return false
}

func (m *Params) GetAllowedCodeIDs() []uint64 {
	if m != nil {
		return m.AllowedCodeIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "larry.abstractaccount.v1.Params")
}

func init() { proto.RegisterFile("abstractaccount/v1/params.proto", fileDescriptor_9649df9baf604574) }

var fileDescriptor_9649df9baf604574 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x40, 0xeb, 0xd7, 0xaa, 0x7a, 0x32, 0xd0, 0x22, 0xc3, 0x10, 0x31, 0xb8, 0x55, 0xc5, 0x90,
	0x85, 0x84, 0x8a, 0x11, 0x06, 0x12, 0x90, 0x10, 0x1b, 0xaa, 0xc4, 0xc2, 0x12, 0xdd, 0xc4, 0x6e,
	0xa8, 0xe4, 0xe0, 0xc8, 0x76, 0x4b, 0xfa, 0x17, 0x7c, 0x16, 0x63, 0xc5, 0xc4, 0x54, 0xa1, 0xe4,
	0x47, 0x50, 0x1c, 0x45, 0xad, 0xd8, 0xec, 0x73, 0xcf, 0xbd, 0xc3, 0xc1, 0x23, 0x88, 0xb5, 0x51,
	0x90, 0x18, 0x48, 0x12, 0xb9, 0x7c, 0x33, 0xfe, 0x6a, 0xea, 0xe7, 0xa0, 0x20, 0xd3, 0x5e, 0xae,
	0xa4, 0x91, 0xc4, 0x11, 0xa0, 0xd4, 0xda, 0xfb, 0xa3, 0x79, 0xab, 0xe9, 0xd9, 0x69, 0x2a, 0x53,
	0x69, 0x25, 0xbf, 0x7e, 0x35, 0xfe, 0xe4, 0x0b, 0xe1, 0xfe, 0x93, 0x3d, 0x40, 0xce, 0xf1, 0x20,
	0x83, 0x22, 0x4a, 0x41, 0x47, 0x31, 0x9f, 0x4b, 0xc5, 0x1d, 0x34, 0x46, 0x6e, 0x6f, 0x76, 0x98,
	0x41, 0xf1, 0x00, 0x3a, 0xb4, 0x8c, 0x4c, 0xf0, 0x51, 0x6b, 0xc1, 0xdc, 0x70, 0xe5, 0xfc, 0xb3,
	0xd2, 0x41, 0x23, 0x05, 0x35, 0x22, 0xb7, 0x98, 0x80, 0x10, 0xf2, 0x3d, 0x02, 0x21, 0xa2, 0x44,
	0x32, 0x1e, 0x2d, 0x98, 0x76, 0xba, 0x63, 0xe4, 0xfe, 0x0f, 0x4f, 0xca, 0xed, 0x68, 0x18, 0xd4,
	0xd3, 0x40, 0x88, 0x3b, 0xc9, 0xf8, 0xe3, 0xbd, 0x9e, 0x0d, 0x61, 0x1f, 0x30, 0x4d, 0x6e, 0xf0,
	0xb1, 0x45, 0x9c, 0xed, 0xf6, 0x7b, 0xe3, 0xae, 0xdb, 0x0b, 0x49, 0xb9, 0x1d, 0x0d, 0x82, 0x66,
	0xd6, 0xae, 0x0f, 0x60, 0xef, 0xcf, 0x74, 0xf8, 0xfc, 0x59, 0x52, 0xb4, 0x29, 0x29, 0xfa, 0x29,
	0x29, 0xfa, 0xa8, 0x68, 0x67, 0x53, 0xd1, 0xce, 0x77, 0x45, 0x3b, 0x2f, 0xd7, 0xe9, 0xc2, 0xbc,
	0x2e, 0x63, 0x2f, 0x91, 0x99, 0x6f, 0x4b, 0x5d, 0x16, 0x7e, 0xdb, 0xea, 0xa2, 0x6d, 0xba, 0x43,
	0x2d, 0x31, 0xeb, 0x9c, 0xeb, 0xb8, 0x6f, 0x93, 0x5d, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x03,
	0x7b, 0x3c, 0xa3, 0x85, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedCodeIDs) > 0 {
		dAtA2 := make([]byte, len(m.AllowedCodeIDs)*10)
		var j1 int
		for _, num := range m.AllowedCodeIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintParams(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.AllowAllCodeIDs {
		i--
		if m.AllowAllCodeIDs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MaxGasAfter != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxGasAfter))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxGasBefore != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxGasBefore))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGasBefore != 0 {
		n += 1 + sovParams(uint64(m.MaxGasBefore))
	}
	if m.MaxGasAfter != 0 {
		n += 1 + sovParams(uint64(m.MaxGasAfter))
	}
	if m.AllowAllCodeIDs {
		n += 2
	}
	if len(m.AllowedCodeIDs) > 0 {
		l = 0
		for _, e := range m.AllowedCodeIDs {
			l += sovParams(uint64(e))
		}
		n += 1 + sovParams(uint64(l)) + l
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasBefore", wireType)
			}
			m.MaxGasBefore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasBefore |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasAfter", wireType)
			}
			m.MaxGasAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllCodeIDs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowAllCodeIDs = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedCodeIDs = append(m.AllowedCodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllowedCodeIDs) == 0 {
					m.AllowedCodeIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedCodeIDs = append(m.AllowedCodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCodeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
